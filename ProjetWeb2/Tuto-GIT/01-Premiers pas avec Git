------------------------------------------------------------------------------------------------------------------------------
Cour
------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------
1)Qu'est-ce que versionner son code ?
------------------------------------------------------------------------------------------------------------------------------
C'est garder la trace de toute la modification faite sur son code, cette trace s'appelle ==> un Commit
une série de modification fait au long de son projet et faire un commit pour garder une trace de l'avancement du projet.
On ce retrouve avec une suite de commmit et la somme de toute c'est modification en faite un historique.
Avantage on garde chaque version du code et on peut revenir en arriere pour corrigé une partie du code.
------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------
2)Git par rapport aux autres solutions de versioning
------------------------------------------------------------------------------------------------------------------------------
les modèles de logiciels de gestion de version
-Modèle centralisée --> Un serveur centrale qui contrôle tout la base de code. Il faut passer part la.
-Modèle distribuée 	--> Tout le monde va avoir l'intégralité de ses informations sur sa machine. il n'y a plus de serveur qui comtrôle tout, chaque devloppeur peut faire office de serveur centrale pour tout le monde.   
git --> Modèle distribuée (réduit le reste de perte de doonée + accéléré les opération faite sur le repository)
------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------
3)Installer Git ==> c'est fait 
------------------------------------------------------------------------------------------------------------------------------
+ Connaître commande bash qu'on utilie tres souvent sur la console Git bash
- [] -> légende -> permet de dire ce que tu dois faire
- ls -> permet de savoir ou est dans arborescence de ordinateur 
- cd [quelquepart comme Destop] -> permet de ce déplacer dans les répertoires de ordi via la console git
- mkdir [nom du répertoire] -> permet de crée un répertoire 
- touch [nom du fichier] -> permet de crée un fichier
------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------
4)Faire son premier commit
------------------------------------------------------------------------------------------------------------------------------
Dans git bash tapez git pour connaitre tout ce que l'on peut faire avec cette commande. 
Crée un un fichier et y accéder pour faire des manipulation avec la console avec cette commande.
------------------------------------------------------------------------------------------------------------------------------
Commandes 
------------------------------------------------------------------------------------------------------------------------------
git status --> permet de connaître le status du fichier en question
fatal erreur ==> repository git ==> le répertoire n'a aucun notion sur git (il faut donc une commande pour lui faire comprendre)
git init --> Permet initialiser le repertoire pour lui faire comprendre se qu'est git
crée un fichier test (touch test puis faire git status ==> probleme fichier non tracker car git ne c'est pas quoi en faire)
git add [nom du fichier] --> Permet de dire a git qu'un fichier a été ajouter (refaire un git statut ==> reconnaît le fichier mais demande un commit (pourquoi? ==> pour mettre a jour le repertoire)) + git add . ==> permet d'ahouter tout les fichier précent d'un coup
git commit -m "[message]" --> dire intitulé quôn veux dire lors du commit
------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------
5)Lire l'historique
------------------------------------------------------------------------------------------------------------------------------
Savoir modifier un fichier avec vim 
crée plusieurs fichier avec des modifications + des commit comme appris dans le chapire avant.
------------------------------------------------------------------------------------------------------------------------------
Commandes 
------------------------------------------------------------------------------------------------------------------------------
git log --> affiche l'historique des commit faire dans le repertoire (du plus récent au plus ancien)
1er ligne ---> commit avec un numéro clef s'appelle le SHA --> 1er ligne
2eme ligne --> nom de l'auteur et son mail
3eme ligne --> date a laquelle se son fait le commit avec son message (pour quitter le log appuiyez sur Q)
git commit -a -m "[message]" ==> s un fichier est deja add utiliser -a pour commit directement car git est deja au courant pour la modif.
------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------
6)Se positionner sur un commit donné
------------------------------------------------------------------------------------------------------------------------------
Commandes 
------------------------------------------------------------------------------------------------------------------------------
git checkout [SHA] --> permet dans le log de choisir le SHA qu'on veux seclectionner pour se possionné dans une date intérieur
git checkout master --> venir au point de depart avec tout les commit enregistré dans le log
------------------------------------------------------------------------------------------------------------------------------